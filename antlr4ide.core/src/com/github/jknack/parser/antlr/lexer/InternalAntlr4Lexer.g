
/*
* generated by Xtext
*/
lexer grammar InternalAntlr4Lexer;


@header {
package {{package}};

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import {{lexer}};
}

@members {
  public Boolean isLexerRule = null;

  public boolean isToken(int ch) {
    return Character.isUpperCase(ch);
  }
}




KEYWORD_32 : 'fragment';

KEYWORD_29 : 'finally';

KEYWORD_30 : 'grammar';

KEYWORD_31 : 'returns';

KEYWORD_25 : 'import';

KEYWORD_26 : 'locals';

KEYWORD_27 : 'parser';

KEYWORD_28 : 'throws';

KEYWORD_23 : 'catch';

KEYWORD_24 : 'lexer';

KEYWORD_21 : 'mode';

KEYWORD_22 : 'tree';

KEYWORD_20 : 'EOF';

KEYWORD_17 : '+=';

KEYWORD_18 : '..';

KEYWORD_19 : '::';

KEYWORD_1 : '#';

KEYWORD_2 : '(';

KEYWORD_3 : ')';

KEYWORD_4 : '*';

KEYWORD_5 : '+';

KEYWORD_6 : ',';

KEYWORD_7 : '.';

KEYWORD_8 : ';' {isLexerRule=null;};

KEYWORD_9 : '<';

KEYWORD_10 : '=';

KEYWORD_11 : '>';

KEYWORD_12 : '?';

KEYWORD_13 : '@';

KEYWORD_14 : '|';

KEYWORD_15 : '}';

KEYWORD_16 : '~';



RULE_TOKEN_VOCAB : 'tokenVocab';

RULE_COLON : ':';

RULE_RARROW : '->';

RULE_OPTIONS_SPEC : 'options' RULE_WS_LOOP '{';

RULE_TOKENS_SPEC : 'tokens' RULE_WS_LOOP '{';

RULE_RULE_REF : 'a'..'z' RULE_NAME_CHAR* {isLexerRule=false;};

RULE_TOKEN_REF : 'A'..'Z' RULE_NAME_CHAR* {isLexerRule=true;};

fragment RULE_NAME_CHAR : (RULE_NAME_START_CHAR|'0'..'9'|'_'|'\u00B7'|'\u0300'..'\u036F'|'\u203F'..'\u2040');

fragment RULE_NAME_START_CHAR : ('A'..'Z'|'a'..'z'|'\u00C0'..'\u00D6'|'\u00D8'..'\u00F6'|'\u00F8'..'\u02FF'|'\u0370'..'\u037D'|'\u037F'..'\u1FFF'|'\u200C'..'\u200D'|'\u2070'..'\u218F'|'\u2C00'..'\u2FEF'|'\u3001'..'\uD7FF'|'\uF900'..'\uFDCF'|'\uFDF0'..'\uFFFD');

RULE_INT : ('0'..'9')+;

RULE_STRING : '\'' RULE_LITERAL_CHAR* '\'';

fragment RULE_LITERAL_CHAR : (RULE_ESC|~(('\''|'\\')));

fragment RULE_ESC : '\\' ('n'|'r'|'t'|'b'|'f'|'"'|'\''|'\\'|'>'|'u' RULE_XDIGIT RULE_XDIGIT RULE_XDIGIT RULE_XDIGIT|.);

fragment RULE_XDIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

RULE_LANG_ACTION : '{' RULE_LAC_BODY '?'?;

fragment RULE_NO_ACTION : ~(('{'|'}'|'\''|'"'|'/'));

fragment RULE_START_ACTION : '{' RULE_LAC_BODY;

fragment RULE_LAC_BODY : (RULE_SL_COMMENT|RULE_ML_COMMENT|RULE_ACTION_STRING_LITERAL|RULE_ACTION_CHAR_LITERAL|RULE_NO_ACTION|RULE_START_ACTION)* '}';

fragment RULE_ACTION_STRING_LITERAL : '"' (('\\')=>RULE_ACTION_ESC | ~'"')* '"';

fragment RULE_ACTION_CHAR_LITERAL : '\'' (('\\')=>RULE_ACTION_ESC | ~'\'' )* '\'';

fragment RULE_ACTION_ESC : '\\' .;

RULE_ARG_OR_CHARSET : ({isLexerRule==Boolean.TRUE}?=>RULE_LEXER_CHAR_SET|{isLexerRule==Boolean.FALSE}?=> RULE_ARG_ACTION);

fragment RULE_LEXER_CHAR_SET : '[' ('\\' ~(('\r'|'\n'))|~(('\r'|'\n'|'\\'|']')))* ']';

fragment RULE_ARG_ACTION : '[' (RULE_ARG_ACTION|('"')=>RULE_ACTION_STRING_LITERAL|('\'')=>RULE_ACTION_CHAR_LITERAL|~(('['|']')))* ']';

RULE_SL_COMMENT : '//' ~(('\r'|'\n'))* '\r'? '\n';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\f'|'\r'? '\n')+;

fragment RULE_WS_LOOP : (RULE_WS|RULE_SL_COMMENT|RULE_ML_COMMENT)*;


