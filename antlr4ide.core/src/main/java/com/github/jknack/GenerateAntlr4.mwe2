module com.github.jknack.GenerateAntlr4

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var projectName = "antlr4ide.core"
var grammarURI = "platform:/resource/${projectName}/src/main/java/com/github/jknack/Antlr4.xtext"
var fileExtensions = "g4"
var generateXtendStub = true
var runtimeProject = "../${projectName}"
var runtimeRootProject = "../antlr4ide"
var encoding = "UTF-8"

Workflow {
    bean = StandaloneSetup {
      // use an XtextResourceset throughout the process, which is able to resolve classpath:/ URIs.
      resourceSet = org.eclipse.xtext.resource.XtextResourceSet:theResourceSet {}

      // add mappings from platform:/resource to classpath:/
      uriMap = {
              from = "platform:/resource/org.eclipse.xtext.xbase/"
              to = "classpath:/"
      }
      uriMap = {
              from = "platform:/resource/org.eclipse.xtext.common.types/"
              to = "classpath:/"
      }
    	scanClassPath = true
    	platformUri = "${runtimeProject}/.."
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}/src/generated/java"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}/model"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeRootProject}.ui/src/generated/java"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeRootProject}.tests/src/generated/java"
    }
    
    component = Generator {
      srcPath = "/src/main/java"
      srcGenPath = "/src/generated/java"
    	pathRtProject = runtimeProject
    	pathUiProject = "${runtimeRootProject}.ui"
    	pathTestProject = "${runtimeRootProject}.tests"
    	projectNameRt = projectName
    	projectNameUi = "antlr4ide.ui"
    	encoding = encoding
    	language = auto-inject {
    	  // make sure we use the resourceSet created during standalone setup.
        forcedResourceSet = theResourceSet

    		uri = grammarURI
    
    		// Java API to access grammar elements (required by several other fragments)
    		fragment = grammarAccess.GrammarAccessFragment auto-inject {}
    
    		// generates Java API for the generated EPackages
    		fragment = ecore.EMFGeneratorFragment auto-inject {
    		  javaModelDirectory = "/${projectName}/src/generated/java"
    		}
    
    		// the old serialization component
    		// fragment = parseTreeConstructor.ParseTreeConstructorFragment auto-inject {}    
    
    		// serializer 2.0
    		fragment = serializer.SerializerFragment auto-inject {
    			generateStub = false
    		}
    
    		// a custom ResourceFactory for use with EMF
    		fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
    
    		// The antlr parser generator fragment.
    		fragment = com.github.jknack.parser.antlr.AntlrGeneratorFragmentWithCustomLexer auto-inject {
//    		  options = {
//    		      backtrackLexer = true
//    		  }
    		}
    
    		// Xtend-based API for validation
    		fragment = validation.ValidatorFragment auto-inject {
    		//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
    		//    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
    		}
    
    		// old scoping and exporting API
    		// fragment = scoping.ImportURIScopingFragment auto-inject {}
    		// fragment = exporting.SimpleNamesFragment auto-inject {}
    
    		// scoping and exporting API
    		// fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
    		// fragment = exporting.QualifiedNamesFragment auto-inject {}
    		fragment = scoping.ImportURIScopingFragment auto-inject {}
    		fragment = exporting.SimpleNamesFragment auto-inject {}
    		fragment = builder.BuilderIntegrationFragment auto-inject {}
    
    		// generator API
    		fragment = generator.GeneratorFragment auto-inject {}
    
    		// formatter API
    		fragment = formatting.FormatterFragment auto-inject {}
    
    		// labeling API
    		fragment = labeling.LabelProviderFragment auto-inject {}
    
    		// outline API
    		fragment = outline.OutlineTreeProviderFragment auto-inject {}
    		fragment = outline.QuickOutlineFragment auto-inject {}
    
    		// quickfix API
    		fragment = quickfix.QuickfixProviderFragment auto-inject {}
    
    		// content assist API
    		fragment = contentAssist.ContentAssistFragment auto-inject {}
    
    		// generates a more lightweight Antlr parser and lexer tailored for content assist
    		fragment = com.github.jknack.parser.antlr.AntlrUiGeneratorFragmentWithCustomLexer auto-inject {}
    
    		// generates junit test support classes into Generator#pathTestProject
    		fragment = junit.Junit4Fragment auto-inject {}
    
    		// rename refactoring
    		fragment = refactoring.RefactorElementNameFragment auto-inject {}
    
    		// provides the necessary bindings for java types integration
    		fragment = types.TypesGeneratorFragment auto-inject {}
    
    		// generates the required bindings only if the grammar inherits from Xbase
    		fragment = xbase.XbaseGeneratorFragment auto-inject {}
    
    		// provides a preference page for template proposals
    		fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
    
    		// provides a compare view
    		fragment = compare.CompareFragment auto-inject {}
    	}
    }
}

